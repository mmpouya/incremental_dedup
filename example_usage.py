"""
THIS IS AN EXAMPLE USAGE FOR DEDUP3
-----------------------------------------------------
This script demonstrates how to use the main classes from these files:
- vector_operations.py
- clustering.py
- diff_operations.py
- elasticsearch_client.py

Hope you find it well ;)

note for trainees:
A class is like a blueprint for an object. You can create (instantiate) objects from a class, and these objects can have data (attributes) and actions (methods).
(this sentences is generated by LLM)
"""

# first:
    # Import the classes from the other files
from incremental_dedup.vector_operations import VectorOperations
from incremental_dedup.clustering import ClusteringOperations, IncrementalClustering
from incremental_dedup.diff_operations import DiffOperations
from incremental_dedup.elasticsearch_client import ElasticsearchClient


# -----------------------------
# 1. ElasticsearchClient
# -----------------------------
# what this class do:
    # This class lets you connect to an Elasticsearch database and do basic operations.
    # Let's create an instance (object) of this class:

print("\n--- ElasticsearchClient Example ---")

# You can specify the address and index name, or use defaults.
elastic_client = ElasticsearchClient(elastic_address="http://localhost:9200", db_index="my_index")

# by using this class, some simple methods would be accessible, like search.
# Example: Search for all documents, just 5 of them.
try:
    result = elastic_client.get_all_documents(size=5)
    print("First 5 documents:", result["hits"]["hits"])
except Exception as e:
    print("(Elasticsearch not running or index missing, so this is just a demo)")

# -----------------------------
# 2. VectorOperations
# -----------------------------
# what this class do:
    # This class extends ElasticsearchClient and adds methods for working with vectors (for similarity search).

print("\n--- VectorOperations Example ---")

vector_ops = VectorOperations(elastic_address="http://localhost:9200", db_index="my_index")

# Example: Extract vectors for a given embedding key (e.g., 'question.bge_search_vector')
try:
    vectors = vector_ops.extract_vectors(embedding_key="question.bge_search_vector", size=3)
    print("Extracted vectors:", vectors)
except Exception as e:
    print("(Demo: Would extract vectors from Elasticsearch)")

# Example: Evaluate similarity between one item and all others
try:
    similarity = vector_ops.evaluate_similarity(item_id="item1", embedding_key="question.bge_search_vector")
    print("Similarity scores:", similarity)
except Exception as e:
    print("(Demo: Would compute similarity using Elasticsearch)")

# Example: Extract questions (text) from the index
try:
    questions = vector_ops.extract_questions(size=3)
    print("Extracted questions:", questions)
except Exception as e:
    print("(Demo: Would extract questions from Elasticsearch)")

# -----------------------------
# 3. ClusteringOperations
# -----------------------------
# This class groups items into clusters based on their vector similarity.

print("\n--- ClusteringOperations Example ---")

# We need a VectorOperations instance to use ClusteringOperations
clustering_ops = ClusteringOperations(vector_ops)

# Example: Cluster a single item into clusters (dummy data)
clusters = [["item2", "item3"]]  # Existing clusters
item_id = "item1"
key = "question.bge_search_vector"
threshold = 0.8

# This would normally use real similarity data, but here we just show the call
try:
    updated_clusters = clustering_ops.cluster_items(item_id, key, threshold, clusters)
    print("Updated clusters:", updated_clusters)
except Exception as e:
    print("(Demo: Would cluster items based on similarity)")

# Example: Analyze clustering for multiple thresholds (would write files)
try:
    clustering_ops.analyze_clustering(key=key, thresholds=[0.8, 0.85], output_dir="./output")
except Exception as e:
    print("(Demo: Would analyze clustering and write output files)")

# Example: Clean clusters (remove clusters with only one item)
example_output = {
    "clusters_1": [{"id": "item1", "question": "Q1"}, {"id": "item2", "question": "Q2"}],
    "clusters_2": [{"id": "item3", "question": "Q3"}]
}
cleaned = ClusteringOperations.clean_clusters(example_output)
print("Cleaned clusters (no singletons):", cleaned)

# -----------------------------
# 4. IncrementalClustering
# -----------------------------
# This class extends ClusteringOperations and adds support for incremental clustering using Elasticsearch.

print("\n--- IncrementalClustering Example ---")

incremental_clustering = IncrementalClustering(vector_ops, clusters_index="clusters")

# Example: Add an item to a cluster (would update Elasticsearch)
try:
    incremental_clustering.add_to_cluster(item_id="item1", key="question.bge_search_vector")
except Exception as e:
    print("(Demo: Would add item to cluster in Elasticsearch)")

# -----------------------------
# 5. DiffOperations
# -----------------------------
# This class compares cluster files and finds unique clusters in each file.

print("\n--- DiffOperations Example ---")

diff_ops = DiffOperations()

# Example: Compare clusters in two files (dummy file names)
input_files = ["clustering_0.80.json", "clustering_0.85.json"]
try:
    unique_clusters = diff_ops.compare_clusters(input_files)
    print("Unique clusters in each file:", unique_clusters)
except Exception as e:
    print("(Demo: Would compare clusters in JSON files)")

# Example: Process diff and save to output file
try:
    diff_ops.process_diff(input_files, output_file="diff_output.json")
except Exception as e:
    print("(Demo: Would write diff results to file)")

"""
Summary:
- Each class is a blueprint for a type of object (e.g., clustering, vector operations).
- You create an object (instance) from a class, then call its methods to do work.
- Methods are functions that belong to a class.
- This script shows how to use each class and method, with comments for beginners.
""" 